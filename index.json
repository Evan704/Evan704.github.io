[{"content":"一级标题 二级标题 markdown Copy 1 2 3 # 一级标题 ## 二级标题 以此类推 加粗\nmarkdown Copy 1 **加粗** 删去线\nmarkdown Copy 1 ~删去线~ 代码块\nc\u0026#43;\u0026#43; Copy 1 std::cout \u0026lt;\u0026lt; \u0026#34;Hello world!\u0026#34;; markdown Copy 1 2 3 ```c++ std::cout \u0026lt;\u0026lt; \u0026#34;Hello world!\u0026#34;; ``` ","permalink":"https://evan704.github.io/posts/markdown-basic-grammar/","summary":"A self reminder","title":"Markdown基本语法"},{"content":"如何搭建一个属于自己的博客？一个简单而便捷的博客搭建方案是Hugo+Github Pages，它具有许多优势：\n完全免费：不需要购买服务器。 速度极快：Hugo 是目前生成网站最快的工具之一。 高度可控：允许你定制自己博客的内容。 准备工作：下载Scoop与Hugo 首先，允许 Powershell 执行远程脚本。打开 Powershell ，执行以下命令：\npowershell Copy 1 Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Powershell 会询问是否确认，输入 y 回车确认即可。\nHint: -Scope CurrentUser保证了这个设置只对当前用户有效，是安全的做法。\n接下来就可以安装 Scoop ，在 Powershell 中执行：\npowershell Copy 1 irm get.scoop.sh | iex 如果无法下载，可以直接在浏览器中打开get.scoop.sh，另存为.ps1文件并运行。 安装脚本运行完毕后，可以输入以下命令来验证安装是否成功：\npowershell Copy 1 scoop help 现在，你就可以直接使用scoop命令来安装软件了！\n在以下教程中，默认你已经安装了 VS Code 和 Git 。\n首先我们可以安装增强版下载工具 aria2 (可选但推荐，Scoop会自动调用它进行多线程下载)：\npowershell Copy 1 scoop install aria2 然后需要下载Hugo：\npowershell Copy 1 scoop install hugo-extended 至此，准备工作完成。\n本地搭建你的博客 1. 创建一个博客项目 进入你希望存放博客的目录（以E:\\MyBlog为例），运行以下命令：\npowershell Copy 1 2 hugo new site MyBlog cd MyBlog 将来，你的博客的文件将会存储在E:\\MyBlog下。\n2. 安装一个主题 以一个流行的简洁而功能强大的主题 PaperMod 为例（即本博客使用的主题）。 首先，将博客初始化为 Git 仓库，在E:\\MyBlog下执行：\npowershell Copy 1 git init 接着，安装 PaperMod\npowershell Copy 1 git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 3. 配置你的博客 在 VS Code中，打开根目录下的hugo.toml文件。在这里，你可以配置你的博客。 为了实现基础功能，将该文件修改如下：\ntoml Copy 1 2 3 4 5 6 baseURL = \u0026#34;https://your-github-username.github.io/\u0026#34; # 重要！将你的 github 用户名填入！ languageCode = \u0026#34;zh-cn\u0026#34; # 网站语言 title = \u0026#34;My Blog\u0026#34; # 网站标题 theme = \u0026#34;PaperMod\u0026#34; # 使用的主题 # 将来的配置写在下面 Hint : 务必修改 baseURL 中的网址！\n开始写第一篇文章！ 运行以下命令创建第一篇文章：\npowershell Copy 1 hugo new content posts/test.md 用该命令创建新文件的好处是新创建的文件会带有默认的 Front Matter：\ntoml Copy 1 2 3 4 5 +++ date = \u0026#39;2025-06-25T09:47:11+08:00\u0026#39; draft = false title = \u0026#39;Test\u0026#39; +++ Front Matter 中可以设置文章的一些基本信息，如标题，日期，是否为草稿等。\n在 Front Matter 下方，你就可以开始书写你的正文了！写完保存后，你就可以执行以下命令来预览你的第一篇文章！\npowershell Copy 1 hugo server -D # -D 参数意为显示草稿文章，默认不显示。 如果一切正常，终端会提示： Web Server is available at http://localhost:1313/\n此时，在浏览器中打开http://localhost:1313/即可预览你的博客。\n你在本地对文章进行修改时，预览版网页也会动态地显示修改，十分方便。\n将博客部署到网络 1. 在 Github 新建两个仓库 一个用于保存源码（假设仓库名为BlogSource），可以设置为 Private ；另一个用于保存发布的静态网页，必须设置为 Public ，且仓库名必须为\u0026lt;username\u0026gt;.github.io。\n2. 推送源码到 Github 在博客的根目录下执行：\npowershell Copy 1 2 3 4 git remote add origin git@github.com:\u0026lt;username\u0026gt;/BlogSource.git # 若设置了 SSH git add . git commit -m \u0026#34;Initialize\u0026#34; git push -u origin master 3. 生成并部署网站 在博客根目录下执行：\npowershell Copy 1 hugo 这会生成一个 public 文件夹，里面就是最终的网页文件。\n进入 public 文件夹，并初始化为 Git 仓库，然后关联到发布仓库。\npowershell Copy 1 2 3 4 5 6 cd public git init git remote add origin git@github.com:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git git add . git commit -m \u0026#34;Build web\u0026#34; git push -u origin master 等待几分钟，就可以访问https://your-github-username.github.io并查看你的博客了！\n优化发布流程 现在每次写完文章都需要手动hugo再cd public再推送，有点麻烦。我们可以利用 Github Action 实现自动化部署。\n1. 设置 workflow 首先，在博客根目录下新建.github文件夹，再在其中新建workflow文件夹。接着在里面新建deploy.yml，并用 VS Code 打开，贴入以下内容：\nyaml Copy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: Deploy Hugo site to Pages on: push: branches: - master # 监视 master 分支 jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: submodules: true # 拉取主题 submodule - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v4 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} publish_dir: ./public # 部署到 \u0026lt;username\u0026gt;.github.io 仓库 external_repository: \u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io publish_branch: master user_name: \u0026#39;github-actions[bot]\u0026#39; user_email: \u0026#39;github-actions[bot]@users.noreply.github.com\u0026#39; 接下来我们需要给这个 Github Action 设置 deploy key。\n2. 生成 SSH 密钥 在任意路径下运行以下命令：\npowershell Copy 1 ssh-keygen -t ed25519 -C \u0026#34;hugo deploy key\u0026#34; -f ./hugo-deploy-key 终端会提示Enter passphrase (empty for no passphrase):，此时需直接输入回车。完成后，在当前路径下会得到两个新文件：\nhugo-deploy-key（私钥） hugo-deploy-key.pub（公钥） 3. 配置公钥 复制公钥中所有内容，打开发布仓库（\u0026lt;username\u0026gt;.github.io仓库），在 Settings 选项卡中选择 Deploy Keys ，点击 Add deploy key 。\n随意输入一个 Title （你看得懂就行），将复制内容贴入 Key 中，勾选 Allow write access ，然后点击 Add key 。\n4. 配置私钥 复制私钥中所有内容，打开源码仓库（BlogSource仓库），在 Settings 选项卡中选择 Secrets and variables ，选择 Actions 。点击 New repository secret ，在 Name 中输入 ACTION_DEPLOY_KEY，在 Secret 中粘贴复制内容，点击 Add secret。\n至此，可以重新向源码仓库提交更改，此时 workflow 已经配置完成。\n在未来写新文章时的流程如下：\nhugo new content posts/something_new.md 写完后保存，将 Front Matter 中的 draft 属性修改为 false 。 通过hugo server进行预览。（重要，也可直接使用hugo） 向源码仓库推送，workflow 会自动完成剩余的工作。 常见问题 为什么公式块不渲染？ 疑似是主题本身的问题，解决方法很简单，在layouts文件夹下新建partials文件夹，然后在其中新建extend_head.html文件，贴入以下内容：\nhtml Copy 1 2 3 4 5 6 7 8 9 10 11 12 {{- if .Params.math -}} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; onload=\u0026#34;renderMathInElement(document.body, { delimiters: [ {left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true}, {left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false} ] });\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end -}} 这段代码会调用 katex 对公式块进行渲染。\n怎么实现 tags 功能 非常简单，完全不需要额外的操作，只需在文章的 Front Matter 中添加 tags 属性即可，例如：\ntoml Copy 1 2 3 4 +++ # 其他属性 tags = [\u0026#34;Code\u0026#34;] +++ 即可为这篇文章创建一个名为 Code 的 tag。点击这个 tag 还能直接查看所有含有这个 tag 的文章。\n","permalink":"https://evan704.github.io/posts/how-to-use-hugo-to-build-a-blog/","summary":"有手就行！","title":"如何利用Hugo搭建一个自己的博客"},{"content":"","permalink":"https://evan704.github.io/tags/","summary":"","title":"标签"}]